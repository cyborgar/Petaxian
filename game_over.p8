; Game over graphics
;  Split in two to fit in array limits

game_over {

  ubyte[] game = [
    $20,$E9,$A0,$A0,$DF,$20,$20,$20,$E9,$A0,$A0,$DF,$20,$20,$DF,$20,$20,$20,$20,$E9,$20,$E9,$A0,$A0,$A0,$A0,
    $E9,$A0,$A0,$A0,$A0,$DF,$20,$E9,$A0,$A0,$A0,$A0,$DF,$20,$A0,$DF,$20,$20,$E9,$A0,$20,$A0,$A0,$A0,$A0,$A0,
    $A0,$A0,$20,$20,$20,$20,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$DF,$E9,$A0,$A0,$20,$A0,$A0,$20,$20,$20,
    $FF,$FE,$20,$A0,$A0,$A0,$20,$A0,$FB,$A0,$A0,$A0,$A0,$20,$A0,$A0,$A0,$A0,$A0,$A0,$20,$FC,$6C,$A0,$A0,$20,
    $A0,$A0,$20,$A0,$A0,$A0,$20,$A0,$6C,$A0,$FC,$A0,$FC,$20,$A0,$A0,$5F,$69,$A0,$EC,$20,$A0,$A0,$A0,$A0,$20,
    $EC,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$20,$20,$A0,$FF,$20,$A0,$FE,$20,$20,$20,
    $5F,$A0,$A0,$A0,$A0,$69,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$A0,$A0,$A0,
    $20,$20,$62,$62,$20,$20,$20,$62,$62,$20,$20,$62,$62,$20,$62,$62,$20,$20,$62,$62,$20,$6C,$62,$62,$62,$62 ]

  ubyte[] over = [
    $20, $E9,$A0,$A0,$DF,$20,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$E9,$A0,$A0,$A0,$A0,$20,$A0,$A0,$A0,$A0,$A0,$DF,
    $E9,$A0,$A0,$A0,$A0,$DF,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$A0,$A0,$A0,$20,$A0,$E1,$A0,$A0,$A0,$A0,
    $A0,$A0,$20,$20,$FC,$7F,$20,$EC,$FB,$20,$20,$A0,$A0,$20,$A0,$A0,$20,$20,$20,$20,$A0,$A0,$20,$20,$A0,$A0,
    $A0,$A0,$20,$20,$A0,$A0,$20,$EC,$6C,$20,$20,$A0,$FE,$20,$A0,$FE,$A0,$A0,$20,$20,$A0,$A0,$A0,$A0,$A0,$69,
    $A0,$A0,$20,$20,$A0,$FB,$20,$A0,$A0,$20,$20,$A0,$A0,$20,$A0,$A0,$A0,$A0,$20,$20,$7E,$7B,$FB,$A0,$A0,$DF,
    $A0,$A0,$20,$20,$A0,$A0,$20,$5F,$A0,$DF,$E9,$A0,$69,$20,$A0,$A0,$20,$20,$20,$20,$A0,$A0,$20,$5F,$A0,$A0,
    $5F,$A0,$A0,$A0,$A0,$69,$20,$20,$5F,$A0,$A0,$69,$20,$20,$A0,$A0,$A0,$A0,$A0,$20,$A0,$A0,$20,$20,$A0,$A0,
    $20,$20,$62,$62,$20,$20,$20,$20,$20,$6C,$7B,$20,$20,$20,$6C,$62,$62,$62,$62,$20,$62,$62,$20,$20,$62,$62
  ]

  ubyte[] game_colors = [
    $01,$0A,$0A,$02,$02,$0E,$0E,$0E,$0A,$0A,$02,$02,$02,$0E,$01,$0A,$0E,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$09,$01,$0A,$0E,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$09,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$09,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02,
    $01,$0A,$0A,$02,$02,$09,$09,$01,$0A,$0A,$02,$02,$09,$0E,$01,$0A,$0A,$0E,$02,$09,$0E,$01,$0A,$0A,$02,$02 ]

  ubyte[] over_colors = [
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$0E,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$0E,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$0E,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$06,$0F,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$06,$0F,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06,
    $01,$03,$03,$0E,$0E,$06,$0E,$01,$03,$03,$0E,$0E,$06,$0F,$01,$03,$03,$0E,$0E,$0E,$01,$03,$03,$0E,$0E,$06 ]


  const ubyte WDT = 26
  const ubyte HGT = 8

  sub draw() {
    ubyte i
    for i in 0 to (WDT*HGT - 1) {
      txt.setcc( base.LBORDER+ 2 + (i % WDT), base.UBORDER+ 2 + (i/WDT),
                 game[i], game_colors[i] )
      txt.setcc( base.LBORDER+12 + (i % WDT), base.UBORDER+12 + (i/WDT),
                 over[i], over_colors[i] )
    }
  }

}
